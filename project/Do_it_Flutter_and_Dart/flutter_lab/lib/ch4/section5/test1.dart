/*
널 안전성이란 널 포인트 예외를 프로그램을 실행하기 전 코드를 작성하는 시점에 점검하는 것을 의미.
널 포인트 예외는 객체가 특정값이 아닌 null을 가리켜서 발생하는 오류이며 컴파일러가 걸러내지 못함.

널 안전성을 지원하지 않는 프로그래밍 언어들은 객체에 널값을 대입할 수 있으며 널인 객체에 접근하면 NPE가 발생하지만,
널 안전성을 지원하는 언어들은 객체가 널일 때 발생할 수 있는 오류를 코드 작성 시점에 점검.
NPE 발생 가능성을 컴파일러가 미리 점검해 주므로 널에 안전한 코드를 작성할 수 있음.

플러터 2.0이 나오면서 다트 언어가 2.12.0 버전으로 업데이트되었고 이 버전부터 널 안전성을 지원하기 시작.
 */
int a1=10;
int? a2=10; // 널 허용 변수 선언
// 널 안전성을 지원하는 프로그래밍 언어에서는 변수를 선언할 때 널 허용과 널 불허용으로 구분.
// 다트 언어는 기본적으로 널 불허를 선언. 만약 널 허용으로 선언하려면 타입 뒤에 물음표를 붙인다.
// 이러한 변수 선언법은 모든 타입에 적용.
testFun(){
  //a1=null; // error
  a2=null;
}

//int a3; // error
// 다트 언어의 모든 변수는 객체. 변수 선언 시 초깃값을 주지 않으면 자동으로 널로 초기화.

class User{
  //int a4; // error
}

testFun1(){
  int a5; // success;
  //a5=null; error.. 널 불허 변수에 널을 대입해서 오류 발생
}
// 다만 널 불허 변수를 선언과 동시에 초기화해야 한다는 규칙은 톱 레벨에 선언된 변수와 클래스 멤버 변수에만 해당.
// 함수에서 지역변수를 널 불허로 선언할 때 초기화하지 않아도 됨.