section01
위젯은 화면에 보일 뷰를 설명하는 객체.
즉, 화면과 관련된 모든 것이 위젯.
플러터는 기본적으로 기본 위젯과 사용자가 작성하는 위젯을 조합해서 화면을 구성.

플러터에서는 화면에 무언가를 출력하는 클래스뿐만 아니라 화면의 구조를 설계하거나 사용자 이벤트를 처리하는 클래스,
요소를 정렬하는 클래스 등 화면과 관련된 모든 것이 위젯.

플러터의 위젯은 모두 Widget의 자식 클래스.

# 선언형 프로그래밍으로 화면을 구성
플러터는 선언형 프로그래밍으로 화면을 구성.(선언형과 반대는 명령형)
선언형 프로그래밍은 많은 프런트엔드 프레임워크가 제공하는 기법. (플러터 공식 문서에서 리액트 프레임워크에서 영감을 얻어 설계했다고 밝힘)

명령형은 개발자가 화면 구성과 관련된 모든 코드를 작성.
예를 들어 화면에 문자열 출력시 데이터뿐만 아니라 위치와 색상, 배경색, 크기 등 많은 정보를 코드로 작성해야함. 따라서 많은 함수 필요.
결국 명령형은 화면을 구성하면 코드가 길어지고 화면과 관련된 많은 API를 알고 있어야함.

반면 선언형은 화면 구성 정보만 작성하면됨. 즉, 위젯의 정보만 제시. 그러면 프레임워크가 알아서 API를 통해서 화면을 출력.

# 위젯은 불변이다.
플러터의 위젯은 불변 객체.
객체 생성한 후 상태를 바꿀 수 없음.
따라서 처음 생성할 때의 정보가 화면에 나옴.
만약 화면에 새 데이터로 갱신하려면 새로운 위젯 객체를 만들어야함.

위젯은 실제화면이 아닌 단순히 화면에 출력할 정보를 가지고 있는 객체. 실제 화면을 출력하는 객체 X
실제 화면을 출력하는 객체는 플러터 프레임워크에서 따로 만들어 사용하므로 화면을 갱신할 때 단순히 정보만 가진 객체를 다시 생성하는 것으로 이해하면됨.

# 위젯의 트리 구조
대부분의 앱의 화면은 위젯을 여러 개 조합해서 구성. 한 화면을 구성하는 모든 위젯은 단일 트리 구조.
따라서 루트 위젯 객체만 runApp()함수에 전달하면 하위에 달린 위젯들까지 실행되어 화면을 구성.

# 화면을 구성하는 3개 트리 구조
플러터 프레임워크가 화면을 만들 때 2개의 트리 구조를 더 만든다.

엘리먼트 트리, 렌더 트리.

개발자는 위젯을 작성해야 하므로 위젯트리만 알고 있으면 되지만, 프레임워크를 이해나는 차원으로 알아두면 좋음.



